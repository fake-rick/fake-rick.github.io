<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>IsaacLab on Fake瑞克的技术博客</title>
    <link>https://fake-rick.github.io/categories/isaaclab/</link>
    <description>Recent content in IsaacLab on Fake瑞克的技术博客</description>
    <image>
      <title>Fake瑞克的技术博客</title>
      <url>https://avatars.githubusercontent.com/u/44377946</url>
      <link>https://avatars.githubusercontent.com/u/44377946</link>
    </image>
    <generator>Hugo -- 0.140.2</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 Jul 2024 19:23:22 +0800</lastBuildDate>
    <atom:link href="https://fake-rick.github.io/categories/isaaclab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IsaacLab创建直接工作流RL环境</title>
      <link>https://fake-rick.github.io/posts/isaaclab%E5%88%9B%E5%BB%BA%E7%9B%B4%E6%8E%A5%E5%B7%A5%E4%BD%9C%E6%B5%81rl%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 21 Jul 2024 19:23:22 +0800</pubDate>
      <guid>https://fake-rick.github.io/posts/isaaclab%E5%88%9B%E5%BB%BA%E7%9B%B4%E6%8E%A5%E5%B7%A5%E4%BD%9C%E6%B5%81rl%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://isaac-sim.github.io/IsaacLab/source/tutorials/03_envs/create_direct_rl_env.html&#34;&gt;https://isaac-sim.github.io/IsaacLab/source/tutorials/03_envs/create_direct_rl_env.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;从环境中获取信息观察&#34;&gt;从环境中获取信息（观察）&lt;/h2&gt;
&lt;h3 id=&#34;获取joint铰链信息位置和速度&#34;&gt;获取joint（铰链）信息：位置和速度&lt;/h3&gt;
&lt;p&gt;joint会被包含在Articulation（关节）中，一个Articulation可能会包含1个或多个的joint对象，可以通过&lt;code&gt;Articulation.find_joints()&lt;/code&gt;方法获得joint在当前Articulation中的索引（index）数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find_joints&lt;/code&gt;的返回值是这样的：&lt;code&gt;tuple[list[joint索引], list[joint名字]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find_joints的函数声明如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_joints&lt;/span&gt;( self, name_keys: str &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Sequence[str], joint_subset: list[str] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, preserve_order: bool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; tuple[list[int], list[str]]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Articulation内部有一个属性私有变量&lt;code&gt;_data: ArticulationData&lt;/code&gt;，该变量通过方法&lt;code&gt;def data(self) -&amp;gt; ArticulationData&lt;/code&gt;获取，在&lt;code&gt;ArticulationData&lt;/code&gt;中存放着几个关节重要的数据：位置&lt;code&gt;ArticulationData._joint_pos&lt;/code&gt;，速度&lt;code&gt;ArticulationData._joint_vel&lt;/code&gt;，加速度&lt;code&gt;ArticulationData._joint_acc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;ArticulationData&lt;/code&gt;有几个&lt;code&gt;@property&lt;/code&gt;装饰器函数，用于获取上述的三个属性，这样可以用过属性名的方式直接访问到这些数据。&lt;/p&gt;
&lt;p&gt;下面介绍下这三个方法的返回值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;joint_pos&lt;/code&gt;返回&lt;code&gt;torch.Size([num_instances, num_joints])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;joint_vel&lt;/code&gt;返回&lt;code&gt;torch.Size([num_instances, num_joints])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;joint_acc&lt;/code&gt;返回&lt;code&gt;torch.Size([num_instances, num_joints])&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;是时候讲解下&lt;code&gt;DirectRLEnv(gym.Env)._get_observations(self) -&amp;gt; VecEnvObs&lt;/code&gt;方法了，该方法带有&lt;code&gt;@abstractmethod&lt;/code&gt;被定义成抽象方法，所以我们在继承&lt;code&gt;DirectRLEnv&lt;/code&gt;类后必须在自己的类中实现&lt;code&gt;_get_observations&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;我们在&lt;code&gt;_get_observations&lt;/code&gt;方法中计算并返回观测值，这会用到上面提到的&lt;code&gt;ArticulationData&lt;/code&gt;以及如何通过&lt;code&gt;joint&lt;/code&gt;索引从中获取实际数据。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;cartpole_env.py&lt;/code&gt;的代码中有如下实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_get_observations&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dict[str, torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tensor &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dict[str, torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tensor]]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	obs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cat(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;joint_pos[:, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_pole_dof_idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;joint_vel[:, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_pole_dof_idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;joint_pos[:, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_cart_dof_idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;joint_vel[:, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_cart_dof_idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		dim&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	observations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;policy&amp;#34;&lt;/span&gt;: obs}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; observations
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码中的&lt;code&gt;_pole_dof_idx&lt;/code&gt;里边存放的是杆子的&lt;code&gt;joint&lt;/code&gt;对应的索引数据，&lt;code&gt;_cart_dof_idx&lt;/code&gt;存放的是小车的&lt;code&gt;joint&lt;/code&gt;对应的索引数据，这里介绍下获取杆子位置的代码，获取杆子速度和小车位置和速度的代码都一样。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
