<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on Fake瑞克的技术博客</title>
    <link>https://fake-rick.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Fake瑞克的技术博客</description>
    <image>
      <title>Fake瑞克的技术博客</title>
      <url>https://avatars.githubusercontent.com/u/44377946</url>
      <link>https://avatars.githubusercontent.com/u/44377946</link>
    </image>
    <generator>Hugo -- 0.131.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Jul 2024 14:48:05 +0800</lastBuildDate>
    <atom:link href="https://fake-rick.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt使用Keepalive机制实现断线重连</title>
      <link>https://fake-rick.github.io/posts/qt%E4%BD%BF%E7%94%A8keepalive%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E/</link>
      <pubDate>Tue, 16 Jul 2024 14:48:05 +0800</pubDate>
      <guid>https://fake-rick.github.io/posts/qt%E4%BD%BF%E7%94%A8keepalive%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E/</guid>
      <description>QTcpSocket能够检测到Socket的连接与断开状态，并触发相关信号，我们只需要关联信号与槽就能够知道连接状态。
connect(&amp;amp;m_socket, &amp;amp;QTcpSocket::connected, this, &amp;amp;TcpClient::onConnected, Qt::QueuedConnection); connect(&amp;amp;m_socket, &amp;amp;QTcpSocket::disconnected, this, &amp;amp;TcpClient::onDisconnected, Qt::QueuedConnection); 还有一些特殊情况是无法触发QTcpSocket::disconnected信号，比如说：网线突然拔了、对端设备突然爆掉了等。这类情况由于对端socket未正常调用close()方法而导致的。
我们可以定义一个心跳包去定期检查对端的存活状态，这种做法在协议还未指定的初期是比较适合的，客户端与服务端制定一套心跳请求与应答机制来判断对端的存活状态。但是往往下位机的程序已经存在（开发者不愿意修改或增加现有协议），这时候如何能够在特殊情况下检测到网络断开呢？
主角登场：Keepalive机制
keepalive简介（摘自维基百科） 传输控制协议（TCP）存活包为可选特性，且默认关闭。存活包内没有数据。在以太网网络中，存活包的大小为最小长度的几帧（64字节）。协议中，还有三个与存活包相关的参数：
存活时长（英语：Keepalive time）即空闲时，两次传输存活包的持续时间。TCP存活包时长可手动配置，默认不少于2个小时。 存活间隔（英语：Keepalive interval）即未收到上个存活包时，两次连续传输存活包的时间间隔。 存活重试次数（英语：Keepalive retry）即在判断远程主机不可用前的发送存活包次数。当两个主机透过TCP/IP协议相连时，TCP存活包可用于判断连接是否可用，并按需中断。 多数支持TCP协议的主机也同时支持TCP存活包。每个主机按一定周期向其他主机发送TCP包来请求回应。若发送主机未收到特定主机的回应（ACK），则将从发送主机一侧中断连接。 若其他主机在连接关闭后发送TCP存活包，关闭连接的一方将发送RST包来表明旧连接已不可用。其他主机将关闭它一侧的连接以新建连接。 空闲的TCP连接通常会隔每45秒或60秒发送一次存活包。在未连续收到三次ACK包时，连接将中断。此行为因主机而异，如默认情况下的Windows主机将在7200000ms（2小时）后发送首个存活包，随后再以1000ms的间隔发送5个存活包。若任意存活包未收到回应，连接将被中断。
Qt开启Keepalive（Linux与Windows） #include &amp;#34;keepalive.h&amp;#34; #include &amp;lt;QObject&amp;gt; const int keepalive = 1; // 开启keepalive属性 const int keepidle = 5; // 如果连接在5秒内没有任何数据来往则进行探测 const int keepinterval = 3; // 探测时发包的时间间隔为3秒 const int keepcount = 3; // 尝试探测的次数， 如果第一次探测包就收到响应，则不在继续探测 #if defined (Q_OS_LINUX) || defined (Q_OS_MACOS) #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;netinet/tcp.</description>
    </item>
  </channel>
</rss>
