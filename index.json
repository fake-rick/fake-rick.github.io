[{"content":"在windows中使用mingw编译vtk存在不少问题, 测试了几个高于vtk-v9.1.0的版本都存在一些问题导致无法正常编译, 本文记录下编译过程\n相关资源下载地址 cmake-3.31.4-windows-x86_64.msi\nvtk-v9.1.0\nVTK编译 \u0026amp; 安装 前置操作: 将Qt5.15.2中的mingw810_64的bin目录添加到系统环境变量中,并重启操作系统, 如: C:\\Qt\\Tools\\mingw810_64\\bin 打开C:\\Qt\\Tools\\mingw810_64\\x86_64-w64-mingw32\\include\\winerror.h文件搜索ERROR_INCORRECT_SIZE __MSABI_LONG, 查看该定义下面是否有以下定义, 没有的话加上:\n#define ERROR_SYMLINK_CLASS_DISABLED 1463 #define ERROR_SYMLINK_NOT_SUPPORTED 1464 #define ERROR_XML_PARSE_ERROR 1465 #define ERROR_XMLDSIG_ERROR 1466 #define ERROR_RESTART_APPLICATION 1467 #define ERROR_WRONG_COMPARTMENT 1468 #define ERROR_AUTHIP_FAILURE 1469 #define ERROR_NO_NVRAM_RESOURCES 1470 下载并安装cmake\n下载并解压vtk-v9.1.0\n进入vtk-v9.1.0目录下创建build文件夹\n打开cmake-gui对vtk-v9.1.0进行配置\n设置源码和编译路径\n点击Configure按钮, 选择MinGW Makefiles, 然后点击Finish\n需要等待CMake进行一些配置, 然后会出现一些新的选项, 下面是一些我们要配置的选项, 先选中界面上的Advanced复选框:\nName Value 描述 CMAKE_CXX_FLAGS -fcommon - CMAKE_C_FLAGS -fcommon - CMAKE_BUILD_TYPE Release 以Release的模式进行编译 CMAKE_INSTALL_PREFIX C:\\Library\\VTK 执行make install时的安装路径 VTK_GROUP_ENABLE_Qt YES 使能Qt选项 然后再次点击Configure按钮, 现在把Advanced复选框取消选中, 可以看到最上面有以下三个配置项, 请根据我的进行修改:\nName Value 描述 Qt5_DIR C:\\Qt\\5.15.2\\mingw81_64\\lib\\cmake\\Qt5 Qt5路径 Qt6_DIR Qt6_DIR-NOTFOUND Qt6路径(这里不需要配置) VTK_QT_VERSION 5 使用Qt5 然后再次点击Configure按钮, 这时候会发现多出来很多Qt相关的配置项, 直接再次点击Configure按钮, 配置项的红色区域全部消失, 然后点击Generate按钮生成\n打开CMD, 进入vtk-v9.1.0\\build目录, 然后执行以下命令开始编译:\nmingw32-make.exe -j 16 最后执行安装指令, 将动态库发布到CMAKE_INSTALL_PREFIX参数指定的目录下\nmingw32-make.exe install ","permalink":"https://fake-rick.github.io/posts/windows%E7%B3%BB%E7%BB%9Fvtk-v9.1.0%E4%BD%BF%E7%94%A8qt5.15.2%E8%87%AA%E5%B8%A6mingw810_64%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91/","summary":"\u003cp\u003e在windows中使用mingw编译vtk存在不少问题, 测试了几个高于vtk-v9.1.0的版本都存在一些问题导致无法正常编译, 本文记录下编译过程\u003c/p\u003e\n\u003ch2 id=\"相关资源下载地址\"\u003e相关资源下载地址\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Kitware/CMake/releases/download/v3.31.4/cmake-3.31.4-windows-x86_64.msi\"\u003ecmake-3.31.4-windows-x86_64.msi\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gitlab.kitware.com/vtk/vtk/-/archive/v9.1.0/vtk-v9.1.0.zip\"\u003evtk-v9.1.0\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"vtk编译--安装\"\u003eVTK编译 \u0026amp; 安装\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e前置操作: 将Qt5.15.2中的mingw810_64的bin目录添加到系统环境变量中,并重启操作系统, 如: \u003ccode\u003eC:\\Qt\\Tools\\mingw810_64\\bin\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./imgs/path.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e打开\u003ccode\u003eC:\\Qt\\Tools\\mingw810_64\\x86_64-w64-mingw32\\include\\winerror.h\u003c/code\u003e文件搜索\u003ccode\u003eERROR_INCORRECT_SIZE __MSABI_LONG\u003c/code\u003e, 查看该定义下面是否有以下定义, 没有的话加上:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_SYMLINK_CLASS_DISABLED                       1463\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_SYMLINK_NOT_SUPPORTED                        1464\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_XML_PARSE_ERROR                              1465\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_XMLDSIG_ERROR                                1466\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_RESTART_APPLICATION                          1467\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_WRONG_COMPARTMENT                            1468\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_AUTHIP_FAILURE                               1469\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ERROR_NO_NVRAM_RESOURCES                           1470\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e下载并安装cmake\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e下载并解压vtk-v9.1.0\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e进入vtk-v9.1.0目录下创建build文件夹\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e打开cmake-gui对vtk-v9.1.0进行配置\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e设置源码和编译路径\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./imgs/1.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e点击Configure按钮, 选择\u003ccode\u003eMinGW Makefiles\u003c/code\u003e, 然后点击Finish\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./imgs/2.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e需要等待CMake进行一些配置, 然后会出现一些新的选项, 下面是一些我们要配置的选项, 先选中界面上的Advanced复选框:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eValue\u003c/th\u003e\n          \u003cth\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCMAKE_CXX_FLAGS\u003c/td\u003e\n          \u003ctd\u003e-fcommon\u003c/td\u003e\n          \u003ctd\u003e-\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCMAKE_C_FLAGS\u003c/td\u003e\n          \u003ctd\u003e-fcommon\u003c/td\u003e\n          \u003ctd\u003e-\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCMAKE_BUILD_TYPE\u003c/td\u003e\n          \u003ctd\u003eRelease\u003c/td\u003e\n          \u003ctd\u003e以Release的模式进行编译\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCMAKE_INSTALL_PREFIX\u003c/td\u003e\n          \u003ctd\u003eC:\\Library\\VTK\u003c/td\u003e\n          \u003ctd\u003e执行make install时的安装路径\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eVTK_GROUP_ENABLE_Qt\u003c/td\u003e\n          \u003ctd\u003eYES\u003c/td\u003e\n          \u003ctd\u003e使能Qt选项\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./imgs/3.png\" alt=\"\"  /\u003e\n\u003c/p\u003e","title":"windows系统vtk-v9.1.0使用Qt5.15.2自带mingw810_64进行编译"},{"content":"IsaacLab本地安装的方式有两种\n通过PIP安装\n二进制安装\n本次课程将使用二进制安装\n安装要求 系统要求 Element Minimum Spec Good Ideal OS Ubuntu 20.04/22.04、Windows 10/11 Ubuntu 20.04/22.04、Windows 10/11 Ubuntu 20.04/22.04、Windows 10/11 CPU Intel Core i7 (7th Generation)、AMD Ryzen 5 Intel Core i7 (9th Generation)、AMD Ryzen 7 Intel Core i9, X-series or higher、AMD Ryzen 9, Threadripper or higher Cores 4 8 16 RAM 32GB* 64GB* 64GB* Storage 50GB SSD 500GB SSD 1TB NVMe SSD GPU GeForce RTX 3070 GeForce RTX 4080 RTX Ada 6000 VRAM 8GB* 16GB* 48GB* 本机配置 描述 地址 显卡 RTX 3080 Ti 操作系统 PopOS（一款基于Ubuntu的操作系统） https://pop.system76.com IsaacSim 4.2.0 https://developer.nvidia.com/omniverse#section-getting-started IsaacLab 最新的main分支 https://github.com/isaac-sim/IsaacLab Anaconda Anaconda3-2024.10-1-Linux-x86_64 https://docs.anaconda.com/anaconda/install 🎉 开始安装！ 1. Anaconda安装（Linux） # 安装依赖 sudo apt-get install libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6 # 下载 \u0026amp; 安装anaconda curl -O https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh bash ~/Anaconda3-2024.10-1-Linux-x86_64.sh # 刷新环境变量 source ~/.zshrc # 或source ~/.bashrc 2. 安装Omniverse Launcher # 下载Omniverse Launcher wget https://install.launcher.omniverse.nvidia.com/installers/omniverse-launcher-linux.AppImage # 添加可执行权限 chmod +x omniverse-launcher-linux.AppImage # 运行 ./omniverse-launcher-linux.AppImage 运行后出现如下界面，然后输入邮箱账号登陆（没注册过的需要先注册）\n登陆后需要进行设置，这里推荐直接默认设置，这样IsaacSim的默认安装路径就在~/.local/share/ov/pkg下\n3. 安装IsaacSim4.2.0 到这里，Omniverse Launcher就已经安装和配置完成了，可以通过Omniverse Launcher直接安装IsaacSim4.2.0\n选择EXCHANGE-\u0026gt;APPS，然后点击ISAAC SIM\n然后点击INSTALL开始安装\n等待安装完成后，点击LAUNCH来启动IsaacSim，看看能否正常运行\n第一次运行时可能会弹出几个弹窗，直接点击OK或者确定就行，下次启动应该就没有了\n点击START启动IsaacSim\n看到这个界面，那证明IsaacSim安装成功并能够正常运行了！\n4. ☕️ 正片开始！安装IsaacLab 4.1 配置IsaacSim环境变量 isaac sim默认被安装在${HOME}/.local/share/ov/pkg/isaac_sim-*路径下。\n在~/.bashrc或~/.zshrc文件中添加如下内容\n# Isaac Sim 根目录 export ISAACSIM_PATH=\u0026#34;${HOME}/.local/share/ov/pkg/isaac-sim-4.2.0\u0026#34; # Isaac Sim python 可执行程序 export ISAACSIM_PYTHON_EXE=\u0026#34;${ISAACSIM_PATH}/python.sh\u0026#34; source ~/.bashrc或source ~/.zshrc更新环境变量\n4.2 克隆IsaacLab项目 # 切换到isaac-sim所在目录 cd ~/.local/share/ov/pkg # 将isaaclab克隆到isaac-sim的同级目录 git clone git@github.com:isaac-sim/IsaacLab.git # 进入IsaacLab目录 cd IsaacLab ⚠️打开./isaaclab.sh文件，在ISAACLAB_PATH变量上方添加canda环境初始化代码\nsource ~/.local/share/ov/pkg/isaac-sim-4.2.0/setup_conda_env.sh # get source directory export ISAACLAB_PATH=\u0026#34;$( cd \u0026#34;$( dirname \u0026#34;${BASH_SOURCE[0]}\u0026#34; )\u0026#34; \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; pwd )\u0026#34; 4.3 在IsaacLab创建IsaacSim的符号链接 ln -s ~/.local/share/ov/pkg/isaac-sim-4.2.0 _isaac_sim 4.4 配置conda环境 本教程的第一部就已经把conda安装完成了，下面的指令会在conda下创建一个名为isaaclab的新环境（当前在IsaacLab目录下）\n./isaaclab.sh --conda 我们可以通过如下指令激活isaaclab的环境，激活环境后我们就可以使用与IsaacSim捆绑在一起的python而无需使用./isaaclab.sh -p来运行python脚本，直接在环境中使用python指令即可。\nconda activate isaaclab 4.5 安装扩展 本教程把所有扩展都安装了，方面后续测试不同的强化学习框架\n# 安装依赖 sudo apt install cmake build-essential # 升级pip python3 -m pip install --upgrade pip # 遍历source/extensions目录下所有的扩展并安装它们 ./isaaclab.sh -i ⚠️如果在执行./isaaclab.sh -i报跟路径相关的错误，请把./isaaclab.sh中的ISAACLAB_PATH变量注释掉，然后再次运行./isaaclab.sh -i\nsource ~/.local/share/ov/pkg/isaac-sim-4.2.0/setup_conda_env.sh # get source directory # export ISAACLAB_PATH=\u0026#34;$( cd \u0026#34;$( dirname \u0026#34;${BASH_SOURCE[0]}\u0026#34; )\u0026#34; \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; pwd )\u0026#34; 5. 🤖 训练第一个模型 # 使用rl_games训练Humanoid-v0模型 ./isaaclab.sh -p source/standalone/workflows/rl_games/train.py --task=Isaac-Humanoid-v0 --headless # 演示模型 ./isaaclab.sh -p source/standalone/workflows/rl_games/play.py --task=Isaac-Humanoid-v0 --num_envs 32 --checkpoint /PATH/TO/model.pth 在演示模型时需要将指令中的PATH替换为实际模型保存的路径。\n","permalink":"https://fake-rick.github.io/posts/%E9%85%8D%E7%BD%AEisaaclab%E7%8E%AF%E5%A2%83/","summary":"\u003cp\u003e\u003cstrong\u003eIsaacLab本地安装的方式有两种\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e通过PIP安装\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e二进制安装\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e本次课程将使用二进制安装\u003c/p\u003e\n\u003ch2 id=\"安装要求\"\u003e安装要求\u003c/h2\u003e\n\u003ch2 id=\"系统要求\"\u003e系统要求\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eElement\u003c/th\u003e\n          \u003cth\u003eMinimum Spec\u003c/th\u003e\n          \u003cth\u003eGood\u003c/th\u003e\n          \u003cth\u003eIdeal\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOS\u003c/td\u003e\n          \u003ctd\u003eUbuntu 20.04/22.04、Windows 10/11\u003c/td\u003e\n          \u003ctd\u003eUbuntu 20.04/22.04、Windows 10/11\u003c/td\u003e\n          \u003ctd\u003eUbuntu 20.04/22.04、Windows 10/11\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCPU\u003c/td\u003e\n          \u003ctd\u003eIntel Core i7 (7th Generation)、AMD Ryzen 5\u003c/td\u003e\n          \u003ctd\u003eIntel Core i7 (9th Generation)、AMD Ryzen 7\u003c/td\u003e\n          \u003ctd\u003eIntel Core i9, X-series or higher、AMD Ryzen 9, Threadripper or higher\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCores\u003c/td\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n          \u003ctd\u003e8\u003c/td\u003e\n          \u003ctd\u003e16\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRAM\u003c/td\u003e\n          \u003ctd\u003e32GB*\u003c/td\u003e\n          \u003ctd\u003e64GB*\u003c/td\u003e\n          \u003ctd\u003e64GB*\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eStorage\u003c/td\u003e\n          \u003ctd\u003e50GB SSD\u003c/td\u003e\n          \u003ctd\u003e500GB SSD\u003c/td\u003e\n          \u003ctd\u003e1TB NVMe SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGPU\u003c/td\u003e\n          \u003ctd\u003eGeForce RTX 3070\u003c/td\u003e\n          \u003ctd\u003eGeForce RTX 4080\u003c/td\u003e\n          \u003ctd\u003eRTX Ada 6000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eVRAM\u003c/td\u003e\n          \u003ctd\u003e8GB*\u003c/td\u003e\n          \u003ctd\u003e16GB*\u003c/td\u003e\n          \u003ctd\u003e48GB*\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"本机配置\"\u003e本机配置\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e描述\u003c/th\u003e\n          \u003cth\u003e地址\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e显卡\u003c/td\u003e\n          \u003ctd\u003eRTX 3080 Ti\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e操作系统\u003c/td\u003e\n          \u003ctd\u003ePopOS（一款基于Ubuntu的操作系统）\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://pop.system76.com\"\u003ehttps://pop.system76.com\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eIsaacSim\u003c/td\u003e\n          \u003ctd\u003e4.2.0\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://developer.nvidia.com/omniverse#section-getting-started\"\u003ehttps://developer.nvidia.com/omniverse#section-getting-started\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eIsaacLab\u003c/td\u003e\n          \u003ctd\u003e最新的main分支\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/isaac-sim/IsaacLab\"\u003ehttps://github.com/isaac-sim/IsaacLab\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAnaconda\u003c/td\u003e\n          \u003ctd\u003eAnaconda3-2024.10-1-Linux-x86_64\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://docs.anaconda.com/anaconda/install\"\u003ehttps://docs.anaconda.com/anaconda/install\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-开始安装\"\u003e🎉 开始安装！\u003c/h2\u003e\n\u003ch3 id=\"1-anaconda安装linux\"\u003e1. Anaconda安装（Linux）\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 安装依赖\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get install libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 下载 \u0026amp; 安装anaconda\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -O https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebash ~/Anaconda3-2024.10-1-Linux-x86_64.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 刷新环境变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esource ~/.zshrc \u003cspan style=\"color:#75715e\"\u003e# 或source ~/.bashrc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-安装omniverse-launcher\"\u003e2. 安装Omniverse Launcher\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 下载Omniverse Launcher\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewget https://install.launcher.omniverse.nvidia.com/installers/omniverse-launcher-linux.AppImage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 添加可执行权限\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e chmod +x omniverse-launcher-linux.AppImage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 运行\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./omniverse-launcher-linux.AppImage\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e运行后出现如下界面，然后输入邮箱账号登陆（没注册过的需要先注册）\u003c/p\u003e","title":"配置IsaacLab环境"},{"content":" 先配置Rust开发STM32所需的环境，文章地址： https://fake-rick.github.io/posts/rust%E9%85%8D%E7%BD%AEstm32%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/\n安装项目创建CLI工具 cargo install cargo-embassy\n生成项目 cargo embassy init my_project --chip stm32f407vgtx\n在Cargo.toml中[dependencies]添加：\nembassy-stm32 = { version = \u0026#34;0.1.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;stm32f407vg\u0026#34;, \u0026#34;unstable-pac\u0026#34;, \u0026#34;memory-x\u0026#34;, \u0026#34;time-driver-any\u0026#34;, \u0026#34;exti\u0026#34;, \u0026#34;chrono\u0026#34;] } Embed.toml文件 # This file was automatically generated. [default.general] chip = \u0026#34;STM32F407VGTx\u0026#34; [default.reset] halt_afterwards = false [default.rtt] enabled = true [default.gdb] enabled = false 运行 cargo run 如果在终端出现以下内容则表示运行成功：\n","permalink":"https://fake-rick.github.io/posts/rust%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91embassy%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","summary":"\u003cul\u003e\n\u003cli\u003e先配置Rust开发STM32所需的环境，文章地址：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://fake-rick.github.io/posts/rust%E9%85%8D%E7%BD%AEstm32%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/\"\u003ehttps://fake-rick.github.io/posts/rust%E9%85%8D%E7%BD%AEstm32%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"安装项目创建cli工具\"\u003e安装项目创建CLI工具\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ecargo install cargo-embassy\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"生成项目\"\u003e生成项目\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ecargo embassy init my_project --chip stm32f407vgtx\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在Cargo.toml中[dependencies]添加：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eembassy-stm32 = { version = \u0026#34;0.1.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;stm32f407vg\u0026#34;, \u0026#34;unstable-pac\u0026#34;, \u0026#34;memory-x\u0026#34;, \u0026#34;time-driver-any\u0026#34;, \u0026#34;exti\u0026#34;, \u0026#34;chrono\u0026#34;] }\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"embedtoml文件\"\u003eEmbed.toml文件\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# This file was automatically generated.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003edefault.general\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echip \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;STM32F407VGTx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003edefault.reset\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehalt_afterwards \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003edefault.rtt\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eenabled \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003edefault.gdb\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eenabled \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"运行\"\u003e运行\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecargo run\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果在终端出现以下内容则表示运行成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./imgs/A.png\" alt=\"\"  /\u003e\n\u003c/p\u003e","title":"Rust嵌入式开发embassy环境搭建"},{"content":"安装 安装cargo工具 cargo install cargo-generate\n安装stlink v2驱动 sudo apt-get install git make cmake libusb-1.0-0-dev sudo apt-get install gcc build-essential git clone https://github.com/stlink-org/stlink.git cd stlink/ mkdir build cd build cmake .. make cd bin/ sudo cp st-* /usr/local/bin cd ../lib/ sudo cp *.so* /lib32 cd ../../ sudo cp config/udev/rules.d/49-stlinkv* /etc/udev/rules.d/ 安装烧录和调试的工具 Linux, macOS curl --proto '=https' --tlsv1.2 -LsSf https://github.com/probe-rs/probe-rs/releases/latest/download/probe-rs-tools-installer.sh | sh\nWIndows irm https://github.com/probe-rs/probe-rs/releases/latest/download/probe-rs-tools-installer.ps1 | iex\n安装适用于ARM Cortex-M目标的rust-std组件 rustup target add thumbv6m-none-eabi thumbv7m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf\n创建工程 cargo generate --git https://github.com/burrbull/stm32-template/\n输入项目相关信息 根据自己的需求和芯片型号进行填写\n字段 值 Project Name simple-stm32f4 What HAL version to use? last-release Is it RTIC-based application? false Will this program use defmt logger? false What microcontroller name? stm32f407vgt6 编译工程并烧录 进入项目目录\ncd simple-stm32f4\n执行编译\u0026amp;烧录命令：\ncargo-flash --release --chip STM32F407VGTx\n如果看到以下输出则表示编译烧录都正常了\n其他配置 如果在启动串口时提示权限不足，可以将当前用户添加到dialout用户组中，然后重启电脑：\nsudo usermod -a -G dialout username 安装JLInk\nsudo apt-get -y install libjaylink-dev ","permalink":"https://fake-rick.github.io/posts/rust%E9%85%8D%E7%BD%AEstm32%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","summary":"\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003ch3 id=\"安装cargo工具\"\u003e安装cargo工具\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ecargo install cargo-generate\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"安装stlink-v2驱动\"\u003e安装stlink v2驱动\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get install git make cmake libusb-1.0-0-dev\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get install gcc build-essential\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone https://github.com/stlink-org/stlink.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd stlink/\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir build\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd build\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecmake ..\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd bin/\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo cp st-* /usr/local/bin\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ../lib/\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo cp *.so* /lib32\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ../../\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo cp config/udev/rules.d/49-stlinkv* /etc/udev/rules.d/\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"安装烧录和调试的工具\"\u003e安装烧录和调试的工具\u003c/h3\u003e\n\u003ch4 id=\"linux-macos\"\u003eLinux, macOS\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003ecurl --proto '=https' --tlsv1.2 -LsSf https://github.com/probe-rs/probe-rs/releases/latest/download/probe-rs-tools-installer.sh | sh\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"windows\"\u003eWIndows\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eirm https://github.com/probe-rs/probe-rs/releases/latest/download/probe-rs-tools-installer.ps1 | iex\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"安装适用于arm-cortex-m目标的rust-std组件\"\u003e安装适用于ARM Cortex-M目标的rust-std组件\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003erustup target add thumbv6m-none-eabi thumbv7m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf\u003c/code\u003e\u003c/p\u003e","title":"Rust配置STM32嵌入式开发环境"},{"content":"原文地址：https://isaac-sim.github.io/IsaacLab/source/tutorials/03_envs/create_direct_rl_env.html\n从环境中获取信息（观察） 获取joint（铰链）信息：位置和速度 joint会被包含在Articulation（关节）中，一个Articulation可能会包含1个或多个的joint对象，可以通过Articulation.find_joints()方法获得joint在当前Articulation中的索引（index）数据。\nfind_joints的返回值是这样的：tuple[list[joint索引], list[joint名字]]\nfind_joints的函数声明如下：\ndef find_joints( self, name_keys: str | Sequence[str], joint_subset: list[str] | None = None, preserve_order: bool = False ) -\u0026gt; tuple[list[int], list[str]] 在Articulation内部有一个属性私有变量_data: ArticulationData，该变量通过方法def data(self) -\u0026gt; ArticulationData获取，在ArticulationData中存放着几个关节重要的数据：位置ArticulationData._joint_pos，速度ArticulationData._joint_vel，加速度ArticulationData._joint_acc\n在ArticulationData有几个@property装饰器函数，用于获取上述的三个属性，这样可以用过属性名的方式直接访问到这些数据。\n下面介绍下这三个方法的返回值：\njoint_pos返回torch.Size([num_instances, num_joints])\njoint_vel返回torch.Size([num_instances, num_joints])\njoint_acc返回torch.Size([num_instances, num_joints])\n是时候讲解下DirectRLEnv(gym.Env)._get_observations(self) -\u0026gt; VecEnvObs方法了，该方法带有@abstractmethod被定义成抽象方法，所以我们在继承DirectRLEnv类后必须在自己的类中实现_get_observations方法。\n我们在_get_observations方法中计算并返回观测值，这会用到上面提到的ArticulationData以及如何通过joint索引从中获取实际数据。\n在cartpole_env.py的代码中有如下实现：\ndef _get_observations(self) -\u0026gt; torch.Dict[str, torch.Tensor | torch.Dict[str, torch.Tensor]]: obs = torch.cat( ( self.joint_pos[:, self._pole_dof_idx[0]].unsqueeze(dim=1), self.joint_vel[:, self._pole_dof_idx[0]].unsqueeze(dim=1), self.joint_pos[:, self._cart_dof_idx[0]].unsqueeze(dim=1), self.joint_vel[:, self._cart_dof_idx[0]].unsqueeze(dim=1), ), dim=-1, ) observations = {\u0026#34;policy\u0026#34;: obs} return observations 上述代码中的_pole_dof_idx里边存放的是杆子的joint对应的索引数据，_cart_dof_idx存放的是小车的joint对应的索引数据，这里介绍下获取杆子位置的代码，获取杆子速度和小车位置和速度的代码都一样。\nself.joint_pos就的返回数据类型是:torch.Size([num_instances, num_joints])形状的张量，所以self.joint_pos[:, self._pole_dof_idx[0]]的意思就是从self.joint_pos中获取索引为self._pole_dof_idx[0]的所有杆子的位置信息\n通过在_get_observations函数中增加了print函数我把数据打印出来\nprint(\u0026#34;[INFO]: _pole_dof_idx -\u0026gt; \u0026#34;, self._pole_dof_idx) print(\u0026#34;[INFO]: joint_pos -\u0026gt; \u0026#34;, self.joint_pos) print(\u0026#34;[INFO]: pole_joint_pos -\u0026gt; \u0026#34;, self.joint_pos[:, self._pole_dof_idx[0]]) 打印出的数据如下：\n[INFO]: _pole_dof_idx -\u0026gt; [1] [INFO]: joint_pos -\u0026gt; tensor([[-0.0995, -0.0243], [-0.5815, 0.0256], [-0.5531, 0.4727], ..., [ 0.4905, -0.7841], [-0.4129, 0.4739], [ 0.4791, -0.8703]], device=\u0026#39;cuda:0\u0026#39;) [INFO]: pole_joint_pos -\u0026gt; tensor([-0.0243, 0.0256, 0.4727, ..., -0.7841, 0.4739, -0.8703], device=\u0026#39;cuda:0\u0026#39;) 由于self._pole_dof_idx[0] == 1，所以第二列的数据存储的就是杆子的位置数据了。位于代码中用了self._pole_dof_idx[0]，因为self._pole_dof_idx的表中只存储了一个joint的索引值，也就是当前杆子对应的joint索引值。\n如果大家感兴趣的话可以把小车的数据也打印出来看下在joint_pos中的第一列数据是否是小车的位置信息。\nPytorch补充： torch.unsqueeze(_input_, _dim_)函数\n用来将_input_的数据增加一个维度，以打印信息的pole_joint_pos数据为例，当dim=1时，一维数组会变成二维张量，如下所示：\ntensor([[-0.0243], [0.0256], [0.4727], ..., [-0.7841], [0.4739], [-0.8703]], device=\u0026#39;cuda:0\u0026#39;) 数据变成了torch.Size([N, 1])，也就是N行一列的数据\ntorch.cat(_tensors_, _dim=0_, _*_, _out=None_) → [Tensor]函数\n用来按照指定维度拼接多个张量，在本例中torch.cat的dim=-1，所以按照张量的最后一个维度进行拼接\n最终_get_observations中的obs变量存储这一个torch.Size([N, 4])形状的张量数据：\n杆子位置 杆子速度 小车位置 小车速度 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 奖励函数 _get_rewards 分析 存活奖励rew_alive 在类class DirectRLEnv(gym.Env)中有以下变量 self.reset_terminated = torch.zeros(self.num_envs, device=self.device, dtype=torch.bool)\n当重置时该变量被设置为true, 否则为false\n在计算存活奖励：rew_alive时的代码如下：rew_alive = rew_scale_alive * (1.0 - reset_terminated.float())\n将torch.bool强转为torch.float类型，当重置发生时rew_scale_alive * （1.0 - 1.0），所以重置时的存活奖励就是0\n终止奖励（惩罚）rew_termination 当代理不稳定或处于不安全的状态时触发，另外如果代理能够长时间稳定运行也会希望终止回合并开始新的回合，这样代理可以学会从不同的起始配置启动\n所以终止分两种：\n时间限制条件 终止条件 计算终止奖励的代码如下：\nrew_termination = rew_scale_terminated * reset_terminated.float()\n速度 \u0026amp; 位置 范围限制奖励 当小车与倒立摆的速度与位置在范围内时能够获得的奖励\n相关的奖励有三个，看下面的代码：\nrew_pole_pos = rew_scale_pole_pos * torch.sum(torch.square(pole_pos), dim=-1) rew_cart_vel = rew_scale_cart_vel * torch.sum(torch.abs(cart_vel), dim=-1) rew_pole_vel = rew_scale_pole_vel * torch.sum(torch.abs(pole_vel), dim=-1) Pytorch补充： torch.sum函数：\n返回输入张量中所有元素的总和，dim=-1表示的是最后一个维度\ntorch.square函数：\n计算所有元素的平方值，并返回新值的张量\ntorch.abs函数：\n计算所有元素的绝对值，并返回新值的张量\n设计终止条件_get_dones 在超时或者超出范围时我们需要重置环境，在DirectRLEnv中有一个抽象方法用于配置终止条件，这个方法返回两个Tensor组成的Tuple。Tuple中的第一个Tensor存储了终止条件，第二个Tensor存储了超时信息，每个张量的形状为：torch.Size([num_envs])\n@abstractmethod def _get_dones(self) -\u0026gt; tuple[torch.Tensor, torch.Tensor] 在cartpole_env.py中的实现如下：\ndef _get_dones(self) -\u0026gt; tuple[torch.Tensor, torch.Tensor]: self.joint_pos = self.cartpole.data.joint_pos self.joint_vel = self.cartpole.data.joint_vel time_out = self.episode_length_buf \u0026gt;= self.max_episode_length - 1 out_of_bounds = torch.any(torch.abs(self.joint_pos[:, self._cart_dof_idx]) \u0026gt; self.cfg.max_cart_pos, dim=1) out_of_bounds = out_of_bounds | torch.any(torch.abs(self.joint_pos[:, self._pole_dof_idx]) \u0026gt; math.pi / 2, dim=1) return out_of_bounds, time_out 超时条件(time_out)计算 将当前所有环境的episode缓冲长度（dtype=torch.long）与最大允许的episode长度进行比较，并将结果存储到一个形状为torch.Size([num_envs])，数据类型为torch.bool的张量中。 下面是DirectRLEnv.max_episode_length的计算方法：\n@property def max_episode_length_s(self) -\u0026gt; float: \u0026#34;\u0026#34;\u0026#34;Maximum episode length in seconds.\u0026#34;\u0026#34;\u0026#34; return self.cfg.episode_length_s @property def max_episode_length(self): \u0026#34;\u0026#34;\u0026#34;The maximum episode length in steps adjusted from s.\u0026#34;\u0026#34;\u0026#34; return math.ceil(self.max_episode_length_s / (self.cfg.sim.dt * self.cfg.decimation)) self.cfg.sim.dt：在SimulationCfg.dt中定义，是物理时间步长（秒），self.cfg.sim.dt * self.cfg.decimation用来计算控制动作而执行频率。 self.cfg.episode_length_s：episode的最大长度（秒） 所以math.ceil(self.max_episode_length_s / (self.cfg.sim.dt * self.cfg.decimation))是计算出最大的物理时间步数并向上取整 小车和杆子的活动界限计算 torch.abs(self.joint_pos[:, self._cart_dof_idx])：获取小车位置信息的绝对值，返回的张量形状为：torch.Size([N, 1]) 然后判断小车位置的绝对值是否大于self.cfg.max_cart_pos值，这时候会返回一个形状为：torch.Size([N, 1])且dtype=bool的张量 最后通过torch.any函数设置dim=1测试所有列的是否为True，并返回形状为torch.Size([N])的张量 ","permalink":"https://fake-rick.github.io/posts/isaaclab%E5%88%9B%E5%BB%BA%E7%9B%B4%E6%8E%A5%E5%B7%A5%E4%BD%9C%E6%B5%81rl%E7%8E%AF%E5%A2%83/","summary":"\u003cp\u003e原文地址：\u003ca href=\"https://isaac-sim.github.io/IsaacLab/source/tutorials/03_envs/create_direct_rl_env.html\"\u003ehttps://isaac-sim.github.io/IsaacLab/source/tutorials/03_envs/create_direct_rl_env.html\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"从环境中获取信息观察\"\u003e从环境中获取信息（观察）\u003c/h2\u003e\n\u003ch3 id=\"获取joint铰链信息位置和速度\"\u003e获取joint（铰链）信息：位置和速度\u003c/h3\u003e\n\u003cp\u003ejoint会被包含在Articulation（关节）中，一个Articulation可能会包含1个或多个的joint对象，可以通过\u003ccode\u003eArticulation.find_joints()\u003c/code\u003e方法获得joint在当前Articulation中的索引（index）数据。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efind_joints\u003c/code\u003e的返回值是这样的：\u003ccode\u003etuple[list[joint索引], list[joint名字]]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003efind_joints的函数声明如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efind_joints\u003c/span\u003e( self, name_keys: str \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Sequence[str], joint_subset: list[str] \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e, preserve_order: bool \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFalse\u003c/span\u003e ) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e tuple[list[int], list[str]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在Articulation内部有一个属性私有变量\u003ccode\u003e_data: ArticulationData\u003c/code\u003e，该变量通过方法\u003ccode\u003edef data(self) -\u0026gt; ArticulationData\u003c/code\u003e获取，在\u003ccode\u003eArticulationData\u003c/code\u003e中存放着几个关节重要的数据：位置\u003ccode\u003eArticulationData._joint_pos\u003c/code\u003e，速度\u003ccode\u003eArticulationData._joint_vel\u003c/code\u003e，加速度\u003ccode\u003eArticulationData._joint_acc\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在\u003ccode\u003eArticulationData\u003c/code\u003e有几个\u003ccode\u003e@property\u003c/code\u003e装饰器函数，用于获取上述的三个属性，这样可以用过属性名的方式直接访问到这些数据。\u003c/p\u003e\n\u003cp\u003e下面介绍下这三个方法的返回值：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ejoint_pos\u003c/code\u003e返回\u003ccode\u003etorch.Size([num_instances, num_joints])\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ejoint_vel\u003c/code\u003e返回\u003ccode\u003etorch.Size([num_instances, num_joints])\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ejoint_acc\u003c/code\u003e返回\u003ccode\u003etorch.Size([num_instances, num_joints])\u003c/code\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e是时候讲解下\u003ccode\u003eDirectRLEnv(gym.Env)._get_observations(self) -\u0026gt; VecEnvObs\u003c/code\u003e方法了，该方法带有\u003ccode\u003e@abstractmethod\u003c/code\u003e被定义成抽象方法，所以我们在继承\u003ccode\u003eDirectRLEnv\u003c/code\u003e类后必须在自己的类中实现\u003ccode\u003e_get_observations\u003c/code\u003e方法。\u003c/p\u003e\n\u003cp\u003e我们在\u003ccode\u003e_get_observations\u003c/code\u003e方法中计算并返回观测值，这会用到上面提到的\u003ccode\u003eArticulationData\u003c/code\u003e以及如何通过\u003ccode\u003ejoint\u003c/code\u003e索引从中获取实际数据。\u003c/p\u003e\n\u003cp\u003e在\u003ccode\u003ecartpole_env.py\u003c/code\u003e的代码中有如下实现：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_get_observations\u003c/span\u003e(self) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e torch\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDict[str, torch\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e torch\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDict[str, torch\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor]]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tobs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e torch\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecat(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoint_pos[:, self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e_pole_dof_idx[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunsqueeze(dim\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoint_vel[:, self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e_pole_dof_idx[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunsqueeze(dim\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoint_pos[:, self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e_cart_dof_idx[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunsqueeze(dim\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoint_vel[:, self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e_cart_dof_idx[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunsqueeze(dim\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tdim\u003cspan style=\"color:#f92672\"\u003e=-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tobservations \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;policy\u0026#34;\u003c/span\u003e: obs}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e observations\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上述代码中的\u003ccode\u003e_pole_dof_idx\u003c/code\u003e里边存放的是杆子的\u003ccode\u003ejoint\u003c/code\u003e对应的索引数据，\u003ccode\u003e_cart_dof_idx\u003c/code\u003e存放的是小车的\u003ccode\u003ejoint\u003c/code\u003e对应的索引数据，这里介绍下获取杆子位置的代码，获取杆子速度和小车位置和速度的代码都一样。\u003c/p\u003e","title":"IsaacLab创建直接工作流RL环境"},{"content":"Park变换 Park变换的目的是将Clark变换后的αβ坐标系转换成d,q旋转坐标系。d轴方向与转子磁链方向重合，所以d轴也叫直轴。q轴方向与转子磁链方向垂直，所以q轴又叫交轴。\n旋转矩阵是什么？ ⊿abo： $ob = oa\\times \\cos(\\theta)$\n已知：bc = ad\n$$ \\because \\angle pad + \\angle pab = 90°\\\\ \\angle oab + \\angle pab = 90°\\\\ \\therefore \\angle oab = \\angle pad\\\\ \\angle aob = \\angle apd = \\angle \\theta $$⊿adp： $ad = ap \\times \\sin(\\theta)$\n$$ \\because oc = ob + bc \\\\ \\therefore oc = oa \\times \\cos(\\theta) + ap \\times \\sin(\\theta) $$所以向量p到d轴的投影为：$oa \\times \\cos(\\theta) + ap \\times \\sin(\\theta)$\n⊿efo： $of =oe \\times cos(\\theta)$\n$$ \\because \\angle peh + \\angle oeh = 90°\\\\ \\angle oef + \\angle oeh = 90°\\\\ \\therefore \\angle peh = \\angle oef $$已知：fg = eh\n⊿eph： $eh = ep \\times sin(\\theta)$\n所以：$fg = ep \\times sin(\\theta)$\n$$ \\because og = of - fg \\\\ \\therefore og = oe \\times cos(\\theta) - ep \\times \\sin(\\theta) $$所以向量p到q轴的投影为：$oe \\times cos(\\theta) - ep \\times \\sin(\\theta)$\n设向量p在αβ坐标系的坐标：$oa = ep = i\\alpha，oe = ap = i\\beta$\n可以得到旋转矩阵：\n$$ \\left[ \\begin{matrix} id \\\\ iq \\end{matrix} \\right] \\left[ \\begin{matrix} \\cos(\\theta) \u0026 \\sin(\\theta) \\\\ -\\sin(\\theta) \u0026 \\cos(\\theta) \\end{matrix} \\right] \\left[ \\begin{matrix} i\\alpha \\\\ i\\beta \\end{matrix} \\right] $$测试 plt.figure(figsize=(10, 3)) def U(m, e): return (m * np.cos(e), m * np.cos(e + 2 * np.pi / 3), m * np.cos(e - 2 * np.pi / 3)) def Clark(a, b, c): return (2/3)*(np.mat([[1, -1/2, -1/2], [0, np.sqrt(3)/2, -np.sqrt(3)/2]]) * np.mat([a, b, c])) def Park(ia, ib, theta): return np.mat([[np.cos(theta), np.sin(theta)], [-np.sin(theta), np.cos(theta)]]) * np.array([ia, ib]) theta = np.arange(0, 6 * np.pi, 0.1) m = 1 (a, b, c) = U(m, np.pi / 4.0) td = Clark(np.array([a]),np.array([b]),np.array([c])) td = Park(td[0].tolist()[0],td[1].tolist()[0], np.pi) d = [] q = [] for t in theta: pd = Park(td[0].tolist()[0],td[1].tolist()[0], t).tolist() d.append(pd[0][0]) q.append(pd[1][0]) plt.plot(theta, d, label=\u0026#34;d\u0026#34;) plt.plot(theta, q, label=\u0026#34;q\u0026#34;) plt.xlabel=\u0026#34;x\u0026#34; plt.ylabel=\u0026#34;y\u0026#34; plt.title(\u0026#39;Park\u0026#39;) plt.legend() plt.show() ","permalink":"https://fake-rick.github.io/posts/park%E5%8F%98%E6%8D%A2/","summary":"\u003ch2 id=\"park变换\"\u003ePark变换\u003c/h2\u003e\n\u003cp\u003ePark变换的目的是将Clark变换后的αβ坐标系转换成d,q旋转坐标系。d轴方向与转子磁链方向重合，所以d轴也叫直轴。q轴方向与转子磁链方向垂直，所以q轴又叫交轴。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./imgs/a.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"旋转矩阵是什么\"\u003e旋转矩阵是什么？\u003c/h2\u003e\n\u003ch3 id=\"abo\"\u003e⊿abo：\u003c/h3\u003e\n\u003cp\u003e$ob = oa\\times \\cos(\\theta)$\u003c/p\u003e\n\u003cp\u003e已知：\u003cstrong\u003ebc = ad\u003c/strong\u003e\u003c/p\u003e\n$$\n\\because \\angle pad + \\angle pab = 90°\\\\ \\angle oab + \\angle pab = 90°\\\\ \\therefore \\angle oab = \\angle pad\\\\ \\angle aob = \\angle apd = \\angle \\theta \n$$\u003ch3 id=\"adp\"\u003e⊿adp：\u003c/h3\u003e\n\u003cp\u003e$ad = ap \\times \\sin(\\theta)$\u003c/p\u003e\n$$\n\\because oc = ob + bc \\\\ \\therefore oc = oa \\times \\cos(\\theta) + ap \\times \\sin(\\theta) \n$$\u003cp\u003e所以向量p到d轴的投影为：$oa \\times \\cos(\\theta) + ap \\times \\sin(\\theta)$\u003c/p\u003e","title":"Park变换"},{"content":" 什么是Clark变换？ Clark变换将三相系统（在 abc 坐标系中）的时域分量转换为正交静止坐标系 (αβ) 中的两个分量。\n利用基变换来实现三相坐标系(abc)到两相正交坐标系(αβ) 已知三相坐标系的相位依次相差120°且αβ为正交坐标系。 将α轴与a轴重叠，将向量a沿着原点O的方向延长做一条辅助线，∠boe和∠coe等于60°。\n计算向量b和向量c到α轴的投影长度： $$ be = \\sin(∠boe) = \\sin(60°) = \\frac{\\sqrt{3}}{2} \\\\ ce = -\\sin(∠coe) = -\\sin(60°) = -\\frac{\\sqrt{3}}{2} $$因为向量c在α轴的下方所以投影为负\n计算向量b和向量c到β轴的投影长度： $$ bg = -\\cos(∠boe) = -\\cos(60°) = -\\frac{1}{2} \\\\ ch = -\\cos(∠coe) = -\\cos(60°) = -\\frac{1}{2} $$因为向量b和向量c在β轴的左侧所以投影为负\n组合出基变换矩阵 根据上面的投影可以得到a,b,c三个向量的坐标：向量 $a=[1, 0]$，向量$b=[-\\frac{1}{2},\\frac{\\sqrt{3}}{2}] $，向量 $c=[-\\frac{1}{2},-\\frac{\\sqrt{3}}{2}] $\n所以基变换矩阵为：\n$$ A = \\left[ \\begin{matrix} 1 \u0026 -\\frac{1}{2} \u0026 -\\frac{1}{2} \\\\ 0 \u0026 \\frac{\\sqrt{3}}{2}\u0026 -\\frac{\\sqrt{3}}{2} \\end{matrix} \\right] $$坐标转换公式为：\n$$ \\left[ \\begin{matrix} i\\alpha \\\\ i\\beta \\end{matrix} \\right] = \\left[ \\begin{matrix} 1 \u0026 -\\frac{1}{2} \u0026 -\\frac{1}{2} \\\\ 0 \u0026 \\frac{\\sqrt{3}}{2}\u0026 -\\frac{\\sqrt{3}}{2} \\end{matrix} \\right] \\left[ \\begin{matrix} ia \\\\ ib \\\\ ic \\end{matrix} \\right] $$$$ i\\alpha = ia - \\frac{1}{2}ib - \\frac{1}{2}ic \\\\ i\\beta = \\frac{\\sqrt{3}}{2}ib - \\frac{\\sqrt{3}}{2}ic $$基尔霍夫电流定律： 所有进入某个节点的电流的总和等于所有离开这个节点的电流的总和。假设进入某节点的电流为正值，离开这个节点的电流为负值，则所有设计这个节点的电流的代数和等于零。\n$ \\sum_{k=1}^{n}(ik)=0 $\n所以：ia + ib + ic = 0，ic = -(ia+ib)\n使用ia和ib将公式中的ic消除后的公式： $$ i\\alpha = ia - \\frac{1}{2}ib + \\frac{1}{2}(ia+ib)\\\\ = ia - \\frac{1}{2}ib + \\frac{1}{2}ia+\\frac{1}{2}ib\\\\ =\\frac{3}{2}ia $$$$ i\\beta = \\frac{\\sqrt{3}}{2}ib + \\frac{\\sqrt{3}}{2}(ia+ib)\\\\ = \\frac{\\sqrt{3}}{2}(ia+2\\times ib) $$等幅值变换 因为：$i\\alpha = \\frac{3}{2}ia$，所以需要在基变换后乘以$\\frac{2}{3}$使得$i\\alpha = ia$，$i\\beta = \\frac{\\sqrt{3}}{3}(ia+2\\times ib) $\n对应的基变换矩阵为：\n$$ \\left[ \\begin{matrix} i\\alpha \\\\ i\\beta \\end{matrix} \\right] =\\frac{2}{3} \\left[ \\begin{matrix} 1 \u0026 -\\frac{1}{2} \u0026 -\\frac{1}{2} \\\\ 0 \u0026 \\frac{\\sqrt{3}}{2}\u0026 -\\frac{\\sqrt{3}}{2} \\end{matrix} \\right] \\left[ \\begin{matrix} ia \\\\ ib \\\\ ic \\end{matrix} \\right] $$测试 为标准三相电压Ua、Ub、Uc在空间上互差120°，Vm为相电压峰值, $\\theta$为电角度：\n$$ Ua = Vm\\times \\cos(\\theta)\\\\ Ub = Vm\\times \\cos(\\theta+\\frac{2\\pi}{3})\\\\ Uc = Vm\\times \\cos(\\theta-\\frac{2\\pi}{3}) $$导入包:\nimport numpy as np import matplotlib.pyplot as plt %matplotlib inline 三相逆变输出的三相电压波形：\nplt.figure(figsize=(10, 3)) def U(m, e): return (m * np.cos(e), m * np.cos(e + 2 * np.pi / 3), m * np.cos(e - 2 * np.pi / 3)) e = np.arange(0, 20, 0.1) m = 1 (a, b, c) = U(m, e) plt.plot(e, a, label=\u0026#34;a\u0026#34;) plt.plot(e, b, label=\u0026#34;b\u0026#34;) plt.plot(e, c, label=\u0026#34;c\u0026#34;) plt.xlabel=\u0026#34;x\u0026#34; plt.ylabel=\u0026#34;y\u0026#34; plt.title(\u0026#39;\u0026#39;) plt.legend() plt.show() 经过Clark变换后的波形:\nplt.figure(figsize=(10, 3)) def U(m, e): return (m * np.cos(e), m * np.cos(e + 2 * np.pi / 3), m * np.cos(e - 2 * np.pi / 3)) def A(a, b, c): return (2/3)*(np.mat([[1, -1/2, -1/2], [0, np.sqrt(3)/2, -np.sqrt(3)/2]]) * np.mat([a, b, c])) e = np.arange(0, 20, 0.1) m = 1 (a, b, c) = U(m, e) d = A(a,b,c) plt.plot(e, d[0].tolist()[0], label=\u0026#34;alpha\u0026#34;) plt.plot(e, d[1].tolist()[0], label=\u0026#34;beta\u0026#34;) plt.xlabel=\u0026#34;x\u0026#34; plt.ylabel=\u0026#34;y\u0026#34; plt.title(\u0026#39;Clark\u0026#39;) plt.legend() plt.show() 如果将Clark变换中的系数$\\frac{2}{3}$去掉后会发现幅值和三相逆变输出的三相电压波形是不一样的，幅度多了1.5倍：\n","permalink":"https://fake-rick.github.io/posts/clark%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./imgs/a.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"什么是clark变换\"\u003e什么是Clark变换？\u003c/h2\u003e\n\u003cp\u003eClark变换将三相系统（在 abc 坐标系中）的时域分量转换为正交静止坐标系 (αβ) 中的两个分量。\u003c/p\u003e\n\u003ch2 id=\"利用基变换来实现三相坐标系abc到两相正交坐标系αβ\"\u003e利用基变换来实现三相坐标系(abc)到两相正交坐标系(αβ)\u003c/h2\u003e\n\u003cp\u003e已知三相坐标系的相位依次相差120°且αβ为正交坐标系。\n将α轴与a轴重叠，将向量a沿着原点O的方向延长做一条辅助线，∠boe和∠coe等于60°。\u003c/p\u003e\n\u003ch2 id=\"计算向量b和向量c到α轴的投影长度\"\u003e计算向量b和向量c到α轴的投影长度：\u003c/h2\u003e\n$$\nbe = \\sin(∠boe) = \\sin(60°) = \\frac{\\sqrt{3}}{2}  \\\\ ce = -\\sin(∠coe) = -\\sin(60°) = -\\frac{\\sqrt{3}}{2}  \n$$\u003cp\u003e因为向量c在α轴的下方所以投影为负\u003c/p\u003e\n\u003ch2 id=\"计算向量b和向量c到β轴的投影长度\"\u003e计算向量b和向量c到β轴的投影长度：\u003c/h2\u003e\n$$\nbg = -\\cos(∠boe) = -\\cos(60°) = -\\frac{1}{2}  \\\\   \nch = -\\cos(∠coe) = -\\cos(60°) = -\\frac{1}{2}  \n$$\u003cp\u003e因为向量b和向量c在β轴的左侧所以投影为负\u003c/p\u003e\n\u003ch2 id=\"组合出基变换矩阵\"\u003e组合出基变换矩阵\u003c/h2\u003e\n\u003cp\u003e根据上面的投影可以得到a,b,c三个向量的坐标：向量 $a=[1, 0]$，向量$b=[-\\frac{1}{2},\\frac{\\sqrt{3}}{2}] $，向量 $c=[-\\frac{1}{2},-\\frac{\\sqrt{3}}{2}] $\u003c/p\u003e\n\u003cp\u003e所以基变换矩阵为：\u003c/p\u003e\n$$\nA =  \\left[ \\begin{matrix} 1 \u0026 -\\frac{1}{2} \u0026 -\\frac{1}{2} \\\\ 0 \u0026 \\frac{\\sqrt{3}}{2}\u0026 -\\frac{\\sqrt{3}}{2} \\end{matrix} \\right] \n$$\u003cp\u003e坐标转换公式为：\u003c/p\u003e","title":"Clark变换矩阵"},{"content":"QTcpSocket能够检测到Socket的连接与断开状态，并触发相关信号，我们只需要关联信号与槽就能够知道连接状态。\nconnect(\u0026amp;m_socket, \u0026amp;QTcpSocket::connected, this, \u0026amp;TcpClient::onConnected, Qt::QueuedConnection); connect(\u0026amp;m_socket, \u0026amp;QTcpSocket::disconnected, this, \u0026amp;TcpClient::onDisconnected, Qt::QueuedConnection); 还有一些特殊情况是无法触发QTcpSocket::disconnected信号，比如说：网线突然拔了、对端设备突然爆掉了等。这类情况由于对端socket未正常调用close()方法而导致的。\n我们可以定义一个心跳包去定期检查对端的存活状态，这种做法在协议还未指定的初期是比较适合的，客户端与服务端制定一套心跳请求与应答机制来判断对端的存活状态。但是往往下位机的程序已经存在（开发者不愿意修改或增加现有协议），这时候如何能够在特殊情况下检测到网络断开呢？\n主角登场：Keepalive机制\nkeepalive简介（摘自维基百科） 传输控制协议（TCP）存活包为可选特性，且默认关闭。存活包内没有数据。在以太网网络中，存活包的大小为最小长度的几帧（64字节）。协议中，还有三个与存活包相关的参数：\n存活时长（英语：Keepalive time）即空闲时，两次传输存活包的持续时间。TCP存活包时长可手动配置，默认不少于2个小时。 存活间隔（英语：Keepalive interval）即未收到上个存活包时，两次连续传输存活包的时间间隔。 存活重试次数（英语：Keepalive retry）即在判断远程主机不可用前的发送存活包次数。当两个主机透过TCP/IP协议相连时，TCP存活包可用于判断连接是否可用，并按需中断。 多数支持TCP协议的主机也同时支持TCP存活包。每个主机按一定周期向其他主机发送TCP包来请求回应。若发送主机未收到特定主机的回应（ACK），则将从发送主机一侧中断连接。 若其他主机在连接关闭后发送TCP存活包，关闭连接的一方将发送RST包来表明旧连接已不可用。其他主机将关闭它一侧的连接以新建连接。 空闲的TCP连接通常会隔每45秒或60秒发送一次存活包。在未连续收到三次ACK包时，连接将中断。此行为因主机而异，如默认情况下的Windows主机将在7200000ms（2小时）后发送首个存活包，随后再以1000ms的间隔发送5个存活包。若任意存活包未收到回应，连接将被中断。\nQt开启Keepalive（Linux与Windows） #include \u0026#34;keepalive.h\u0026#34; #include \u0026lt;QObject\u0026gt; const int keepalive = 1; // 开启keepalive属性 const int keepidle = 5; // 如果连接在5秒内没有任何数据来往则进行探测 const int keepinterval = 3; // 探测时发包的时间间隔为3秒 const int keepcount = 3; // 尝试探测的次数， 如果第一次探测包就收到响应，则不在继续探测 #if defined (Q_OS_LINUX) || defined (Q_OS_MACOS) #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;netinet/tcp.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; // 开启TCP心跳检测机制 int enableKeepalive(int fd) { if (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, \u0026amp;keepalive, sizeof(keepalive)) \u0026lt; 0) return -1; if (setsockopt(fd, SOL_TCP, TCP_KEEPIDLE, \u0026amp;keepidle, sizeof(keepidle)) \u0026lt; 0) return -1; if (setsockopt(fd, SOL_TCP, TCP_KEEPINTVL, \u0026amp;keepinterval, sizeof(keepinterval)) \u0026lt; 0) return -1; if (setsockopt(fd, SOL_TCP, TCP_KEEPCNT, \u0026amp;keepcount, sizeof(keepcount)) \u0026lt; 0) return -1; return 0; } #elif defined (Q_OS_WIN) #include \u0026lt;winsock2.h\u0026gt; #define SIO_KEEPALIVE_VALS _WSAIOW(IOC_VENDOR,4) struct tcp_keepalive { unsigned long onoff; unsigned long keepalivetime; unsigned long keepaliveinterval; }; int enableKeepalive(int fd) { if (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (char*)\u0026amp;keepalive, sizeof(keepalive)) \u0026lt; 0) return -1; struct tcp_keepalive in_keep_alive; memset(\u0026amp;in_keep_alive, 0, sizeof(in_keep_alive)); unsigned long ul_in_len = sizeof(struct tcp_keepalive); struct tcp_keepalive out_keep_alive; memset(\u0026amp;out_keep_alive, 0, sizeof(out_keep_alive)); unsigned long ul_out_len = sizeof(struct tcp_keepalive); unsigned long ul_bytes_return = 0; in_keep_alive.onoff = 1; // 打开keepalive in_keep_alive.keepaliveinterval = keepinterval * 1000; // 发送keepalive心跳时间间隔-单位为毫秒 in_keep_alive.keepalivetime = keepidle * 1000; // 多长时间没有报文开始发送keepalive心跳包-单位为毫秒 if (WSAIoctl(fd, SIO_KEEPALIVE_VALS, (LPVOID)\u0026amp;in_keep_alive, ul_in_len, (LPVOID)\u0026amp;out_keep_alive, ul_out_len, \u0026amp;ul_bytes_return, NULL, NULL) \u0026lt; 0) return -1; return 0; } #else int enableKeepalive(int fd) { Q_UNUSED(fd); return -1; } #endif Socket文件描述符的获取 QAbstractSocket::socketDescriptor() ，在socket连接成功后可使通过m_socket-\u0026gt;socketDescriptor();获取到QTcpSocket的文件描述符（FD）,失败时返回-1，这边获取到的fd可以提供给int enableKeepalive(int fd);作为参数用于启用keepalive。\n文档介绍：\nReturns the native socket descriptor of the QAbstractSocket object if this is available; otherwise returns -1.\nIf the socket is using QNetworkProxy, the returned descriptor may not be usable with native socket functions.\nThe socket descriptor is not available when QAbstractSocket is in UnconnectedState.\n断线重连 在开启keepalive后我们就可以在链路断开时触发QTcpSocket::disconnected信号了，这时候我们只需要开启一个定时器去试试检查QTcpSocket的状态，当状态为QAbstractSocket::UnconnectedState时清理QTcpSocket资源并尝试重新与服务端建立连接即可。\n// 状态检查定时器槽函数 void TcpClient::onCheckState() { switch (m_socket.state()) { case QAbstractSocket::UnconnectedState: m_socket.close(); m_socket.abort(); m_socket.connectToHost(m_remoteIp, m_remotePort); break; case QAbstractSocket::HostLookupState: break; case QAbstractSocket::ConnectingState: break; case QAbstractSocket::ConnectedState: break; case QAbstractSocket::BoundState: break; case QAbstractSocket::ListeningState: break; case QAbstractSocket::ClosingState: break; } } ","permalink":"https://fake-rick.github.io/posts/qt%E4%BD%BF%E7%94%A8keepalive%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E/","summary":"\u003cp\u003e\u003ccode\u003eQTcpSocket\u003c/code\u003e能够检测到Socket的连接与断开状态，并触发相关信号，我们只需要关联信号与槽就能够知道连接状态。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econnect(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003em_socket, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eQTcpSocket\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003econnected, \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eTcpClient\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eonConnected, Qt\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eQueuedConnection);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econnect(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003em_socket, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eQTcpSocket\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003edisconnected, \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eTcpClient\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eonDisconnected, Qt\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eQueuedConnection);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e还有一些特殊情况是无法触发\u003ccode\u003eQTcpSocket::disconnected\u003c/code\u003e信号，比如说：网线突然拔了、对端设备突然爆掉了等。这类情况由于对端socket未正常调用\u003ccode\u003eclose()\u003c/code\u003e方法而导致的。\u003c/p\u003e\n\u003cp\u003e我们可以定义一个心跳包去定期检查对端的存活状态，这种做法在协议还未指定的初期是比较适合的，客户端与服务端制定一套心跳请求与应答机制来判断对端的存活状态。但是往往下位机的程序已经存在（开发者不愿意修改或增加现有协议），这时候如何能够在特殊情况下检测到网络断开呢？\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e主角登场：Keepalive机制\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"keepalive简介摘自维基百科\"\u003ekeepalive简介（摘自维基百科）\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e传输控制协议（TCP）存活包为可选特性，且默认关闭。存活包内没有数据。在以太网网络中，存活包的大小为最小长度的几帧（64字节）。协议中，还有三个与存活包相关的参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e存活时长（英语：Keepalive time）即空闲时，两次传输存活包的持续时间。TCP存活包时长可手动配置，默认不少于2个小时。\u003c/li\u003e\n\u003cli\u003e存活间隔（英语：Keepalive interval）即未收到上个存活包时，两次连续传输存活包的时间间隔。\u003c/li\u003e\n\u003cli\u003e存活重试次数（英语：Keepalive retry）即在判断远程主机不可用前的发送存活包次数。当两个主机透过TCP/IP协议相连时，TCP存活包可用于判断连接是否可用，并按需中断。\n多数支持TCP协议的主机也同时支持TCP存活包。每个主机按一定周期向其他主机发送TCP包来请求回应。若发送主机未收到特定主机的回应（ACK），则将从发送主机一侧中断连接。 若其他主机在连接关闭后发送TCP存活包，关闭连接的一方将发送RST包来表明旧连接已不可用。其他主机将关闭它一侧的连接以新建连接。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e空闲的TCP连接通常会隔每45秒或60秒发送一次存活包。在未连续收到三次ACK包时，连接将中断。此行为因主机而异，如默认情况下的Windows主机将在7200000ms（2小时）后发送首个存活包，随后再以1000ms的间隔发送5个存活包。若任意存活包未收到回应，连接将被中断。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"qt开启keepalivelinux与windows\"\u003eQt开启Keepalive（Linux与Windows）\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;keepalive.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;QObject\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e keepalive \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// 开启keepalive属性\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e keepidle \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;     \u003cspan style=\"color:#75715e\"\u003e// 如果连接在5秒内没有任何数据来往则进行探测\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e keepinterval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e; \u003cspan style=\"color:#75715e\"\u003e// 探测时发包的时间间隔为3秒\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e keepcount \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// 尝试探测的次数， 如果第一次探测包就收到响应，则不在继续探测\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#if defined (Q_OS_LINUX) || defined (Q_OS_MACOS)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;sys/socket.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;sys/types.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;netinet/tcp.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;netinet/in.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 开启TCP心跳检测机制\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eenableKeepalive\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e fd) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ekeepalive, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(keepalive)) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (setsockopt(fd, SOL_TCP, TCP_KEEPIDLE, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ekeepidle, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(keepidle)) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (setsockopt(fd, SOL_TCP, TCP_KEEPINTVL, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ekeepinterval, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(keepinterval)) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (setsockopt(fd, SOL_TCP, TCP_KEEPCNT, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ekeepcount, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(keepcount)) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#elif defined (Q_OS_WIN)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;winsock2.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define SIO_KEEPALIVE_VALS _WSAIOW(IOC_VENDOR,4)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etcp_keepalive\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e onoff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e keepalivetime;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e keepaliveinterval;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eenableKeepalive\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e fd) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ekeepalive, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(keepalive)) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etcp_keepalive\u003c/span\u003e in_keep_alive;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    memset(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ein_keep_alive, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(in_keep_alive));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e ul_in_len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etcp_keepalive\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etcp_keepalive\u003c/span\u003e out_keep_alive;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    memset(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eout_keep_alive, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(out_keep_alive));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e ul_out_len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etcp_keepalive\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e ul_bytes_return \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    in_keep_alive.onoff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;                                \u003cspan style=\"color:#75715e\"\u003e// 打开keepalive\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    in_keep_alive.keepaliveinterval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e keepinterval \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e;  \u003cspan style=\"color:#75715e\"\u003e// 发送keepalive心跳时间间隔-单位为毫秒\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    in_keep_alive.keepalivetime \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e keepidle \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e;          \u003cspan style=\"color:#75715e\"\u003e// 多长时间没有报文开始发送keepalive心跳包-单位为毫秒\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (WSAIoctl(fd, SIO_KEEPALIVE_VALS, (LPVOID)\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ein_keep_alive, ul_in_len,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                               (LPVOID)\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eout_keep_alive, ul_out_len, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eul_bytes_return, NULL, NULL) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#else\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eenableKeepalive\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e fd) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Q_UNUSED(fd);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"socket文件描述符的获取\"\u003eSocket文件描述符的获取\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eQAbstractSocket::socketDescriptor() \u003c/code\u003e，在socket连接成功后可使通过\u003ccode\u003em_socket-\u0026gt;socketDescriptor();\u003c/code\u003e获取到QTcpSocket的文件描述符（FD）,失败时返回\u003ccode\u003e-1\u003c/code\u003e，这边获取到的fd可以提供给\u003ccode\u003eint enableKeepalive(int fd);\u003c/code\u003e作为参数用于启用\u003ccode\u003ekeepalive\u003c/code\u003e。\u003c/p\u003e","title":"Qt使用Keepalive机制实现断线重连"}]